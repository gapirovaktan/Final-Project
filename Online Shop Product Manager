#include <bits/stdc++.h>
using namespace std ;
  class Product {
       public:
      string name ;
      string description ;
      double price ;
      int stock;
         
    Product (string n,string des,double p,int s) {
      name =n;
      description=des;
      price=p;
      stock=s;
    }
  } ;
  void addProduct(vector<Product>& products) {
    string name, description;
    double price;
    int stock;

    cout << "Enter product name: ";
    cin.ignore();
    getline(cin, name);
    cout << "Enter product description: ";
    getline(cin, description);
    cout << "Enter product price: ";
    cin >> price;
    cout << "Enter product stock: ";
    cin >> stock;
    cin.ignore();

    products.push_back(Product(name, description, price, stock));
    cout << "Product added successfully." << endl;
}
void updateProduct(vector<Product>& products) {
    string name;
    cout << "Enter the name of the product to update: ";
    cin.ignore();
    getline(cin, name);

    for (int i = 0; i < products.size(); ++i) {
        if (products[i].name == name) {
            cout << "Enter new description: ";
            getline(cin, products[i].description);
            cout << "Enter new price: ";
            cin >> products[i].price;
            cout << "Enter new stock: ";
            cin >> products[i].stock;
            cin.ignore();

            cout << "Product updated successfully." << endl;
            return;
        }
        
    }

    cout << "Product not found." << endl;
}
void deleteProduct(vector<Product>& products) {
    string name;
    cout << "Enter the name of the product to delete: ";
    cin.ignore();
    getline(cin, name);

    for (int i = 0; i < products.size(); ++i) {
        if (products[i].name == name) {
            products.erase(products.begin() + i);
            cout << "Product deleted successfully." << endl;
            return;
        }
    }
      cout << "Product not found." << endl;
}
void viewProducts(const vector<Product>& products) {
    if (products.empty()) {
        cout << "No products available." << endl;
        return;
    }

    for (int i = 0; i < products.size(); ++i) {
        cout << "Name: " << products[i].name << endl;
        cout << "Description: " << products[i].description << endl;
        cout << "Price: " << products[i].price << endl;
        cout << "Stock: " << products[i].stock << endl;
    }
}

void saveProductsToFile(const vector<Product>& products, const string& filename) {
    ofstream outFile(filename);

    for (int i = 0; i < products.size(); ++i) {
        outFile << products[i].name << endl;
        outFile << products[i].description << endl;
        outFile << products[i].price << endl;
        outFile << products[i].stock << endl;
    }

    cout << "Products saved to file." << endl;
}

void loadProductsFromFile(vector<Product>& products, const string& filename) {
    ifstream inFile(filename);

    string name, description;
    double price;
    int stock;

    while (getline(inFile, name)) {
        getline(inFile, description);
        inFile >> price;
        inFile >> stock;
        inFile.ignore();
        products.push_back(Product(name, description, price, stock));
    }

    cout << "Products loaded from file." << endl;
}

void showMenu() {
    cout << "1. Add Product" << endl;
    cout << "2. Update Product" << endl;
    cout << "3. Delete Product" << endl;
    cout << "4. View Products" << endl;
    cout << "5. Exit" << endl;
    cout << "Enter your choice: ";
}

int main() {
    vector<Product> products;
    string filename = "products.txt";
    loadProductsFromFile(products, filename);

    while (true) {
        showMenu();
        int choice;
        cin >> choice;

        switch (choice) {
        case 1:
            addProduct(products);
            break;
        case 2:
            updateProduct(products);
            break;
        case 3:
            deleteProduct(products);
            break;
        case 4:
            viewProducts(products);
            break;
        case 5:
            saveProductsToFile(products, filename);
            return 0;
        default:
            cout << "Invalid choice, please try again." << endl;
        }
    }

    return 0;
}
